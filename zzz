local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()


local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'Void.lua - Mvsd',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})




-- tabs
local Main = {
    Main = Window:AddTab('Main'),
}


-- tabs
local Aiming = {
    -- Creates a new tab titled Main
    HBE = Window:AddTab('Aiming'),
}

local ESP = {
    -- Creates a new tab titled Main
    ESP = Window:AddTab('ESP'),
}


-- Create group boxes for each tab separately
local AutoGroupBox = Main.Main:AddLeftGroupbox('Auto')
local HBEGroupBox = Aiming.HBE:AddLeftGroupbox('HBE')
local ESPGroupBox = ESP.ESP:AddLeftGroupbox('ESP')



-- e


local killAllEnabled = false

-- Function to handle enabling the kill functionality
function EnableKillAll()
    while killAllEnabled do
        local success, err = pcall(function()
            local Backpack = game:GetService("Players").LocalPlayer.Backpack:GetChildren()
            local gun = nil

            -- Equip Gun If Not Equipped
            for i, v in pairs(Backpack) do
                if v:FindFirstChildWhichIsA("Sound") then
                    gun = v
                    gun.Parent = game:GetService("Players").LocalPlayer.Character
                end
            end

            -- Loop through all players in the workspace
            for i, v in pairs(workspace:GetChildren()) do
                if v:IsA("Model") and game.Players:FindFirstChild(v.Name) and v.Name ~= game.Players.LocalPlayer.Name and not v:FindFirstChild("Highlight") then
                    -- Define arguments for the shooting action
                    local args = {
                        [1] = Vector3.new(-265.2897033691406, 62.42794036865334, 162.05580139160156),  -- Target position (adjust if needed)
                        [2] = Vector3.new(-219.57574462890625, 54.045166015625, 319.8157653808594), -- Another target position
                        [3] = v.LeftLowerArm.Part,  -- Target part of the model (change this to whatever part you need)
                        [4] = Vector3.new(-234.1997833251953, 58.66779708862305, 272.2261657714844)  -- Another position (adjust if needed)
                    }

                    -- Fire the remote to trigger the shooting action
                    game:GetService("ReplicatedStorage").Remotes.Shoot:FireServer(unpack(args))
                end
            end
        end)

        if not success then
            warn("Error in EnableKillAll: " .. tostring(err))
        end

        -- Avoid overloading the game loop
        task.wait(0.1) -- Adjust delay as needed for performance
    end
end

-- Create the toggle inside LeftGroupBox
AutoGroupBox:AddToggle('KillAllToggle', {
    Text = 'Kill All',
    Default = false, -- Default state
    Tooltip = 'Automatically attacks all players in the game',

    Callback = function(Value)
        killAllEnabled = Value
        print("Kill All Enabled:", Value)

        if Value then
            task.spawn(EnableKillAll) -- Run in a separate thread
        else
            killAllEnabled = false -- Ensure loop stops
        end
    end
})







-- hbe


local isEnabled = false  -- Tracks whether hitbox modification is enabled
local hitboxSize = 10     -- Default hitbox size
local transparency = 0.5  -- Default transparency (range: 0 to 1)
local boxColor = Color3.fromRGB(255, 255, 255)  -- Default hitbox color

local players = game:GetService("Players")
local runService = game:GetService("RunService")

-- Function to modify hitboxes
local function modifyHitboxes()
    for _, player in pairs(players:GetPlayers()) do
        if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            rootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)  -- Adjust size
            rootPart.Transparency = transparency  -- Adjust transparency
            rootPart.Material = Enum.Material.Neon  -- Set material to Neon for visibility
            rootPart.CanCollide = true
            rootPart.Color = boxColor  -- Apply color from the color picker
        end
    end
end

-- Continuously apply modifications if enabled
runService.RenderStepped:Connect(function()
    if isEnabled then
        modifyHitboxes()
    end
end)

-- **Toggle for Hitbox Expander**
HBEGroupBox:AddToggle('HitboxToggle', {
    Text = 'Hitbox Expander',
    Default = false,
    Tooltip = 'Expands enemy hitboxes to make aiming easier',

    Callback = function(state)
        isEnabled = state
        print("Hitbox Modifier:", state)
        if not isEnabled then
            -- Reset hitboxes when disabled
            for _, player in pairs(players:GetPlayers()) do
                if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = player.Character.HumanoidRootPart
                    rootPart.Size = Vector3.new(2, 2, 1)  -- Reset to default size
                    rootPart.Transparency = 0           -- Reset transparency
                    rootPart.Material = Enum.Material.Plastic  -- Reset material
                    rootPart.CanCollide = true
                    rootPart.Color = Color3.fromRGB(255, 255, 255)  -- Reset color
                end
            end
        end
    end
})

-- **Slider to adjust hitbox size**
HBEGroupBox:AddSlider('HitboxSizeSlider', {
    Text = 'Hitbox Size',
    Default = hitboxSize,
    Min = 2,
    Max = 50,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        hitboxSize = Value
        print("Hitbox Size:", Value)
        if isEnabled then
            modifyHitboxes()  -- Update hitboxes when size is changed while enabled
        end
    end
})

-- **Slider to adjust transparency**
HBEGroupBox:AddSlider('TransparencySlider', {
    Text = 'Transparency',
    Default = transparency * 100, -- Convert transparency to 0-100 scale
    Min = 0,
    Max = 100,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        transparency = Value / 100  -- Convert back to 0-1 range
        print("Transparency:", transparency)
        if isEnabled then
            modifyHitboxes()  -- Update transparency when changed
        end
    end
})

-- **Color Picker for Hitbox Color**
HBEGroupBox:AddLabel('Hitbox Color'):AddColorPicker('HitboxColorPicker', {
    Default = boxColor, 
    Title = 'Select Hitbox Color', -- Title when opened

    Callback = function(Value)
        boxColor = Value
        print("Box Color:", Value)
        if isEnabled then
            modifyHitboxes()  -- Update hitboxes when color is changed
        end
    end
})

