local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()


local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'Void.lua - Mvsd',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})




-- tabs
local Main = {
    Main = Window:AddTab('Main'),
}


-- tabs
local Aiming = {
    -- Creates a new tab titled Main
    HBE = Window:AddTab('Aiming'),
}

local Misc = {
    -- Creates a new tab titled Main
    Misc = Window:AddTab('Misc'),
}


local ESP = {
    -- Creates a new tab titled Main
    ESP = Window:AddTab('ESP'),
}


-- Create group boxes for each tab separately
local AutoGroupBox = Main.Main:AddLeftGroupbox('Auto')
local HBEGroupBox = Aiming.HBE:AddLeftGroupbox('HBE')
local MiscGroupBox = Misc.Misc:AddLeftGroupbox('Misc')
local ESPGroupBox = ESP.ESP:AddLeftGroupbox('ESP')



-- e


local killAllEnabled = false

-- Function to handle enabling the kill functionality
function EnableKillAll()
    while killAllEnabled do
        local success, err = pcall(function()
            local Backpack = game:GetService("Players").LocalPlayer.Backpack:GetChildren()
            local gun = nil

            -- Equip Gun If Not Equipped
            for i, v in pairs(Backpack) do
                if v:FindFirstChildWhichIsA("Sound") then
                    gun = v
                    gun.Parent = game:GetService("Players").LocalPlayer.Character
                end
            end

            -- Loop through all players in the workspace
            for i, v in pairs(workspace:GetChildren()) do
                if v:IsA("Model") and game.Players:FindFirstChild(v.Name) and v.Name ~= game.Players.LocalPlayer.Name and not v:FindFirstChild("Highlight") then
                    -- Define arguments for the shooting action
                    local args = {
                        [1] = Vector3.new(-265.2897033691406, 62.42794036865334, 162.05580139160156),  -- Target position (adjust if needed)
                        [2] = Vector3.new(-219.57574462890625, 54.045166015625, 319.8157653808594), -- Another target position
                        [3] = v.LeftLowerArm.Part,  -- Target part of the model (change this to whatever part you need)
                        [4] = Vector3.new(-234.1997833251953, 58.66779708862305, 272.2261657714844)  -- Another position (adjust if needed)
                    }

                    -- Fire the remote to trigger the shooting action
                    game:GetService("ReplicatedStorage").Remotes.Shoot:FireServer(unpack(args))
                end
            end
        end)

        if not success then
            warn("Error in EnableKillAll: " .. tostring(err))
        end

        -- Avoid overloading the game loop
        task.wait(0.1) -- Adjust delay as needed for performance
    end
end

-- Create the toggle inside LeftGroupBox
AutoGroupBox:AddToggle('KillAllToggle', {
    Text = 'Kill All',
    Default = false, -- Default state
    Tooltip = 'Automatically attacks all players in the game',

    Callback = function(Value)
        killAllEnabled = Value
        print("Kill All Enabled:", Value)

        if Value then
            task.spawn(EnableKillAll) -- Run in a separate thread
        else
            killAllEnabled = false -- Ensure loop stops
        end
    end
})



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local DuelPads = {
    ["Pad1"] = Workspace.Lobby:GetChildren()[2].DuelRing_1v1:GetChildren()[3].Pad,
    ["Pad2"] = Workspace.Lobby:GetChildren()[2].DuelRing_2v2:GetChildren()[3].Pad,
    ["Pad3"] = Workspace.Lobby:GetChildren()[2].DuelRing_3v3:GetChildren()[3].Pad,
    ["Pad4"] = Workspace.Lobby:GetChildren()[2].DuelRing_4v4:GetChildren()[3].Pad
}

local Toggles = {
    ["Pad1"] = false,
    ["Pad2"] = false,
    ["Pad3"] = false,
    ["Pad4"] = false
}

local function TeleportLoop(pad)
    while Toggles[pad] do
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = DuelPads[pad].CFrame
        end
        task.wait(1) -- Teleport every second
    end
end

AutoGroupBox:AddToggle('Toggle_Pad1', {
    Text = 'Teleport to Pad1',
    Default = false,
    Tooltip = 'Teleport 1v1 Pad',
    Callback = function(Value)
        Toggles["Pad1"] = Value
        if Value then
            task.spawn(function() TeleportLoop("Pad1") end)
        end
    end
})

AutoGroupBox:AddToggle('Toggle_Pad2', {
    Text = 'Teleport to Pad2',
    Default = false,
    Tooltip = 'Teleport 2v2 Pad',
    Callback = function(Value)
        Toggles["Pad2"] = Value
        if Value then
            task.spawn(function() TeleportLoop("Pad2") end)
        end
    end
})

AutoGroupBox:AddToggle('Toggle_Pad3', {
    Text = 'Teleport to Pad3',
    Default = false,
    Tooltip = 'Teleport 3v3 Pad',
    Callback = function(Value)
        Toggles["Pad3"] = Value
        if Value then
            task.spawn(function() TeleportLoop("Pad3") end)
        end
    end
})

AutoGroupBox:AddToggle('Toggle_Pad4', {
    Text = 'Teleport to Pad4',
    Default = false,
    Tooltip = 'Teleport 4v4 Pad',
    Callback = function(Value)
        Toggles["Pad4"] = Value
        if Value then
            task.spawn(function() TeleportLoop("Pad4") end)
        end
    end
})










-- hbe


local isEnabled = false  -- Tracks whether hitbox modification is enabled
local hitboxSize = 10     -- Default hitbox size
local transparency = 0.5  -- Default transparency (range: 0 to 1)
local boxColor = Color3.fromRGB(255, 255, 255)  -- Default hitbox color

local players = game:GetService("Players")
local runService = game:GetService("RunService")

-- Function to modify hitboxes
local function modifyHitboxes()
    for _, player in pairs(players:GetPlayers()) do
        if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            rootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)  -- Adjust size
            rootPart.Transparency = transparency  -- Adjust transparency
            rootPart.Material = Enum.Material.Neon  -- Set material to Neon for visibility
            rootPart.CanCollide = true
            rootPart.Color = boxColor  -- Apply color from the color picker
        end
    end
end

-- Continuously apply modifications if enabled
runService.RenderStepped:Connect(function()
    if isEnabled then
        modifyHitboxes()
    end
end)

-- **Toggle for Hitbox Expander**
HBEGroupBox:AddToggle('HitboxToggle', {
    Text = 'Hitbox Expander',
    Default = false,
    Tooltip = 'Expands enemy hitboxes to make aiming easier',

    Callback = function(state)
        isEnabled = state
        print("Hitbox Modifier:", state)
        if not isEnabled then
            -- Reset hitboxes when disabled
            for _, player in pairs(players:GetPlayers()) do
                if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = player.Character.HumanoidRootPart
                    rootPart.Size = Vector3.new(2, 2, 1)  -- Reset to default size
                    rootPart.Transparency = 0           -- Reset transparency
                    rootPart.Material = Enum.Material.Plastic  -- Reset material
                    rootPart.CanCollide = true
                    rootPart.Color = Color3.fromRGB(255, 255, 255)  -- Reset color
                end
            end
        end
    end
})

-- **Slider to adjust hitbox size**
HBEGroupBox:AddSlider('HitboxSizeSlider', {
    Text = 'Hitbox Size',
    Default = hitboxSize,
    Min = 2,
    Max = 50,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        hitboxSize = Value
        print("Hitbox Size:", Value)
        if isEnabled then
            modifyHitboxes()  -- Update hitboxes when size is changed while enabled
        end
    end
})

-- **Slider to adjust transparency**
HBEGroupBox:AddSlider('TransparencySlider', {
    Text = 'Transparency',
    Default = transparency * 100, -- Convert transparency to 0-100 scale
    Min = 0,
    Max = 100,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        transparency = Value / 100  -- Convert back to 0-1 range
        print("Transparency:", transparency)
        if isEnabled then
            modifyHitboxes()  -- Update transparency when changed
        end
    end
})

-- **Color Picker for Hitbox Color**
HBEGroupBox:AddLabel('Hitbox Color'):AddColorPicker('HitboxColorPicker', {
    Default = boxColor, 
    Title = 'Select Hitbox Color', -- Title when opened

    Callback = function(Value)
        boxColor = Value
        print("Box Color:", Value)
        if isEnabled then
            modifyHitboxes()  -- Update hitboxes when color is changed
        end
    end
})
-- Misc

-- MISC FEATURES --


-- Toggle: Infinite Jump
local InfiniteJumpEnabled = false
MiscGroupBox:AddToggle('InfiniteJumpToggle', {
    Text = 'Infinite Jump',
    Default = false,
    Tooltip = 'Allows you to jump infinitely',
    Callback = function(Value)
        InfiniteJumpEnabled = Value
        print('[cb] Infinite Jump:', Value)

        if InfiniteJumpEnabled then
            game:GetService("UserInputService").JumpRequest:Connect(function()
                if InfiniteJumpEnabled and game.Players.LocalPlayer.Character then
                    local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        end
    end
})

-- Toggle: NoClip
local NoClipEnabled = false
MiscGroupBox:AddToggle('NoClipToggle', {
    Text = 'NoClip',
    Default = false,
    Tooltip = 'Walk through walls',
    Callback = function(Value)
        NoClipEnabled = Value
        print('[cb] NoClip:', Value)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        game:GetService("RunService").Stepped:Connect(function()
            if NoClipEnabled and character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
})

-- Toggle: Fly
local FlyEnabled = false
local FlySpeed = 50
local BodyVelocity

local function EnableFly()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
    BodyVelocity.Velocity = Vector3.zero
    BodyVelocity.Parent = rootPart

    local userInput = game:GetService("UserInputService")

    local function updateVelocity()
        local direction = Vector3.zero
        if userInput:IsKeyDown(Enum.KeyCode.W) then direction = direction + Vector3.new(0, 0, -1) end
        if userInput:IsKeyDown(Enum.KeyCode.S) then direction = direction + Vector3.new(0, 0, 1) end
        if userInput:IsKeyDown(Enum.KeyCode.A) then direction = direction + Vector3.new(-1, 0, 0) end
        if userInput:IsKeyDown(Enum.KeyCode.D) then direction = direction + Vector3.new(1, 0, 0) end
        if userInput:IsKeyDown(Enum.KeyCode.Space) then direction = direction + Vector3.new(0, 1, 0) end
        if userInput:IsKeyDown(Enum.KeyCode.LeftControl) then direction = direction + Vector3.new(0, -1, 0) end

        if direction.Magnitude > 0 then
            BodyVelocity.Velocity = direction.Unit * FlySpeed
        else
            BodyVelocity.Velocity = Vector3.zero
        end
    end

    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        if FlyEnabled then
            updateVelocity()
        else
            BodyVelocity:Destroy()
            connection:Disconnect()
        end
    end)
end

MiscGroupBox:AddToggle('FlyToggle', {
    Text = 'Fly',
    Default = false,
    Tooltip = 'Enables flight mode',
    Callback = function(Value)
        FlyEnabled = Value
        print('[cb] Fly Enabled:', Value)

        if FlyEnabled then
            EnableFly()
        elseif BodyVelocity then
            BodyVelocity:Destroy()
        end
    end
})

-- Slider: Fly Speed
MiscGroupBox:AddSlider('FlySpeedSlider', {
    Text = 'Fly Speed',
    Default = 50,
    Min = 10,
    Max = 200,
    Rounding = 1,
    Callback = function(Value)
        FlySpeed = Value
        print('[cb] Fly Speed set to:', Value)
    end
})

-- Slider: Jump Power
MiscGroupBox:AddSlider('JumpPowerSlider', {
    Text = 'Jump Power',
    Default = 50,
    Min = 16,
    Max = 399,
    Rounding = 1,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value
            print('[cb] Jump Power set to:', Value)
        end
    end
})

-- Slider: Walk Speed
MiscGroupBox:AddSlider('WalkSpeedSlider', {
    Text = 'Walk Speed',
    Default = 16,
    Min = 16,
    Max = 399,
    Rounding = 1,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value
            print('[cb] Walk Speed set to:', Value)
        end
    end
})

-- Toggle: Float
local FloatEnabled = false
local FloatHeight = 0
local BodyPosition
local FloatConnection

local function EnableFloat()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    FloatHeight = rootPart.Position.Y

    BodyPosition = Instance.new("BodyPosition")
    BodyPosition.MaxForce = Vector3.new(0, 100000, 0)
    BodyPosition.P = 10000
    BodyPosition.D = 100
    BodyPosition.Position = rootPart.Position + Vector3.new(0, 0, 0)
    BodyPosition.Parent = rootPart

    FloatConnection = game:GetService("RunService").RenderStepped:Connect(function()
        if FloatEnabled then
            BodyPosition.Position = Vector3.new(rootPart.Position.X, FloatHeight, rootPart.Position.Z)
        else
            if FloatConnection then FloatConnection:Disconnect() end
            if BodyPosition then BodyPosition:Destroy() end
        end
    end)
end

MiscGroupBox:AddToggle('FloatToggle', {
    Text = 'Float',
    Default = false,
    Tooltip = 'Float in the air',
    Callback = function(Value)
        FloatEnabled = Value
        print('[cb] Float Enabled:', Value)

        if FloatEnabled then
            EnableFloat()
        else
            if FloatConnection then FloatConnection:Disconnect() end
            if BodyPosition then BodyPosition:Destroy() end
        end
    end
})

-- Slider: Float Height
MiscGroupBox:AddSlider('FloatHeightSlider', {
    Text = 'Float Height',
    Default = 0,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Callback = function(Value)
        FloatHeight = Value
        print('[cb] Float Height Updated:', Value)
    end
})






-- Esp



local settings = {
    BoxESP = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 2,
    },
    NameESP = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 15,
    },
}

local players = game:GetService("Players")
local runService = game:GetService("RunService")
local camera = game.Workspace.CurrentCamera
local localPlayer = players.LocalPlayer
local espObjects = {} -- Store ESP objects per player

-- Function to create Drawing objects
local function createDrawing(type, properties)
    local obj = Drawing.new(type)
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
    return obj
end

local function createESPForPlayer(player)
    local espData = {
        Box = {
            Top = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Bottom = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Left = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Right = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
        },
        Name = createDrawing("Text", {
            Size = settings.NameESP.Size,
            Color = settings.NameESP.Color,
            Center = true,
        }),
    }
    espObjects[player] = espData
end

local function cleanupESPForPlayer(player)
    if espObjects[player] then
        for _, obj in pairs(espObjects[player].Box) do
            obj:Remove()
        end
        if espObjects[player].Name then
            espObjects[player].Name:Remove()
        end
        espObjects[player] = nil
    end
end

local function updateESP()
    for player, data in pairs(espObjects) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)

            if onScreen then
                -- Update Box ESP
                if settings.BoxESP.Enabled then
                    local size = Vector3.new(2, 3, 0)
                    local topLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, size.Y, 0)).Position)
                    local topRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, size.Y, 0)).Position)
                    local bottomLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, -size.Y, 0)).Position)
                    local bottomRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, -size.Y, 0)).Position)

                    local box = data.Box
                    box.Top.From = Vector2.new(topLeft.X, topLeft.Y)
                    box.Top.To = Vector2.new(topRight.X, topRight.Y)
                    box.Bottom.From = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    box.Bottom.To = Vector2.new(bottomRight.X, bottomRight.Y)
                    box.Left.From = Vector2.new(topLeft.X, topLeft.Y)
                    box.Left.To = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    box.Right.From = Vector2.new(topRight.X, topRight.Y)
                    box.Right.To = Vector2.new(bottomRight.X, bottomRight.Y)

                    for _, line in pairs(box) do
                        line.Color = settings.BoxESP.Color
                        line.Thickness = settings.BoxESP.Thickness
                        line.Visible = true
                    end
                else
                    for _, line in pairs(data.Box) do
                        line.Visible = false
                    end
                end

                -- Update Name ESP
                if settings.NameESP.Enabled then
                    local nameTag = data.Name
                    nameTag.Text = player.Name
                    nameTag.Position = Vector2.new(screenPos.X, screenPos.Y - 30)
                    nameTag.Size = settings.NameESP.Size
                    nameTag.Color = settings.NameESP.Color
                    nameTag.Visible = true
                else
                    data.Name.Visible = false
                end
            else
                -- Hide ESP if off-screen
                for _, line in pairs(data.Box) do
                    line.Visible = false
                end
                data.Name.Visible = false
            end
        else
            cleanupESPForPlayer(player)
        end
    end
end

-- Setup ESP for Players
local function setupESPForPlayer(player)
    if player ~= localPlayer then
        cleanupESPForPlayer(player)
        createESPForPlayer(player)
        player.CharacterAdded:Connect(function()
            wait(0.1)
            cleanupESPForPlayer(player)
            createESPForPlayer(player)
        end)
    end
end

local function setupESP()
    for _, player in ipairs(players:GetPlayers()) do
        setupESPForPlayer(player)
    end

    players.PlayerAdded:Connect(setupESPForPlayer)
    players.PlayerRemoving:Connect(cleanupESPForPlayer)

    runService.RenderStepped:Connect(updateESP)
end

-- GUI Integration with LeftGroupBox
ESPGroupBox:AddToggle('BoxESP_Toggle', {
    Text = 'Box ESP',
    Default = false,
    Tooltip = 'Enables or disables Box ESP',
    Callback = function(Value)
        settings.BoxESP.Enabled = Value
    end
})

ESPGroupBox:AddLabel('Box ESP Color'):AddColorPicker('BoxESP_ColorPicker', {
    Default = settings.BoxESP.Color,
    Title = 'Select Box ESP Color',
    Callback = function(Value)
        settings.BoxESP.Color = Value
    end
})

ESPGroupBox:AddSlider('BoxESP_Thickness', {
    Text = 'Box Thickness',
    Default = settings.BoxESP.Thickness,
    Min = 1,
    Max = 5,
    Rounding = 1,
    Callback = function(Value)
        settings.BoxESP.Thickness = Value
    end
})

ESPGroupBox:AddToggle('NameESP_Toggle', {
    Text = 'Name ESP',
    Default = false,
    Tooltip = 'Enables or disables Name ESP',
    Callback = function(Value)
        settings.NameESP.Enabled = Value
    end
})

ESPGroupBox:AddLabel('Name ESP Color'):AddColorPicker('NameESP_ColorPicker', {
    Default = settings.NameESP.Color,
    Title = 'Select Name ESP Color',
    Callback = function(Value)
        settings.NameESP.Color = Value
    end
})
ESPGroupBox:AddSlider('NameESP_Size', {
    Text = 'Name ESP Size',
    Default = settings.NameESP.Size,
    Min = 10,
    Max = 30,
    Rounding = 1,
    Callback = function(Value)
        settings.NameESP.Size = Value
    end
})

-- Start the ESP system
setupESP()
